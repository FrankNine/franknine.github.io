1
00:00:00,001 --> 00:00:02,952
我們對物件進行了一系列座標變換

2
00:00:02,977 --> 00:00:08,423
物件的模型座標變換、接著是攝影機產生的視角與投影座標變換

3
00:00:08,448 --> 00:00:12,967
透視除法（Perspective Divide）將裁切座標（Clip Coordinates）轉換到 Normalized Device Coordinates

4
00:00:12,992 --> 00:00:15,522
最後還有個簡單的座標變換

5
00:00:15,547 --> 00:00:18,899
從 Normalized Device Coordinates 到視窗座標（Window Coordinates）

6
00:00:18,924 --> 00:00:22,888
換句話說要怎麼從 XYZ 在 -1 ~ 1 空間

7
00:00:22,912 --> 00:00:24,729
到有深度緩衝區的影像

8
00:00:24,754 --> 00:00:29,836
答案很簡單，加 1 除以 2 乘上視窗解析度

9
00:00:29,861 --> 00:00:34,449
這樣將 -1 ~ 1 轉換到 0 ~ 1

10
00:00:34,474 --> 00:00:38,002
另一個流行的繪圖 API DirectX

11
00:00:38,027 --> 00:00:43,516
它的 Normalized Device Coordinates 的 Z 值域是 0 ~ 1 而非 -1 ~ 1

12
00:00:43,541 --> 00:00:47,991
值域本身沒那麼重要，重點是有不同值域種類

13
00:00:48,016 --> 00:00:52,925
我看過的所有系統 X 跟 Y 值域則通常是 -1 ~ 1

14
00:00:52,950 --> 00:00:57,654
在 Three.js 你用 setViewport 方法選定一部分的螢幕

15
00:00:57,679 --> 00:01:01,078
設定左下角座標還有寬跟高

16
00:01:01,103 --> 00:01:07,866
這裡我們設定視埠左下角離視窗左邊 1/4

17
00:01:07,891 --> 00:01:11,006
視埠大小是視窗的一半

18
00:01:11,031 --> 00:01:15,284
可以同時有多個視埠，每個視埠展示不同影像

19
00:01:15,309 --> 00:01:17,320
各自獨立繪製

20
00:01:17,345 --> 00:01:22,634
這在建模時相當有用，可以看到不同方式繪製的場景

21
00:01:22,659 --> 00:01:29,460
我給的 NDC 到視窗座標轉換公式假設左下角是原點 (0, 0)

22
00:01:29,485 --> 00:01:35,341
有的時候 Y 會上下顛倒，像是文件物件模型（Document Object Model）

23
00:01:35,366 --> 00:01:40,279
有些影像顯示系統認為左上角才是原點 (0, 0)

24
00:01:40,304 --> 00:01:45,732
如果你操作產生的影像發現 Y 軸翻轉了，很可能是這設定沒對上

25
00:01:45,757 --> 00:01:47,552
當我們談到 (0, 0)

26
00:01:47,577 --> 00:01:52,997
是左下角像素的左下角是 (0.0, 0.0)

27
00:01:53,021 --> 00:01:54,542
是浮點數

28
00:01:54,567 --> 00:02:00,507
像素的中心不是 (0.0, 0.0) 是 (0.5, 0.5)

29
00:02:00,532 --> 00:02:04,281
像素中心應該要是這樣

30
00:02:04,306 --> 00:02:08,643
DirectX 9 弄成中心是 (0.0, 0.0)

31
00:02:08,667 --> 00:02:10,713
DirectX 10 修正了

32
00:02:10,738 --> 00:02:16,480
我看過課本說像素中心是 (0.0, 0.0)，不要聽他們的

33
00:02:16,505 --> 00:02:25,180
像素中心若是 (0.0, 0.0)，則像素左下角會是 (-0.5, -0.5)

34
00:02:25,205 --> 00:02:29,546
浮點數與整數間轉換會變困難

35
00:02:29,571 --> 00:02:32,298
設定正確你只要去掉小數就好

36
00:02:32,323 --> 00:02:37,314
我偶而遇過偏移半個像素會讓演算更有效率

37
00:02:37,339 --> 00:02:39,492
但大部分的時間你不該這樣

