1
00:00:00,001 --> 00:00:04,293
在 Three.js 定義正交攝影機需要兩項操作

2
00:00:04,317 --> 00:00:06,301
首先是定義一塊空間

3
00:00:06,326 --> 00:00:09,815
再來是依照你的需要移動這塊空間

4
00:00:09,840 --> 00:00:14,786
第一段程式創造了正交攝影機並定義觀測的方盒狀空間

5
00:00:14,811 --> 00:00:17,780
這個盒子由左到右的寬度限制

6
00:00:17,805 --> 00:00:22,899
上到下的高度限制、前到後的長度限制所定義，都是在世界座標系

7
00:00:22,924 --> 00:00:25,923
這些限制對應到 X, Y, Z 軸

8
00:00:25,948 --> 00:00:29,885
攝影機可以想像是在盒子正 Z 軸的邊上

9
00:00:29,910 --> 00:00:33,888
看向負 Z 軸，而上的方向依然是正 Y

10
00:00:33,913 --> 00:00:38,665
為了方便我定義了視角大小 viewSize 變數，代表我想要的攝影機垂直空間高度

11
00:00:38,690 --> 00:00:42,609
長寬比（Aspect Ratio）就是這個視窗長寬的比例

12
00:00:42,634 --> 00:00:45,603
它描述相對於高度寬度有多寬

13
00:00:45,628 --> 00:00:51,160
假如你的視角是 1000 像素寬 500 像素高，則長寬比是 2

14
00:00:51,185 --> 00:00:54,670
即你的盒子是高度的 2 倍寬

15
00:00:54,695 --> 00:00:58,086
如果設定錯你的視角會拉伸，應該不是你想要的

16
00:00:58,111 --> 00:01:01,173
這段程式定義了空間中的一個盒子

17
00:01:01,198 --> 00:01:03,809
這裡中心在原點

18
00:01:03,834 --> 00:01:08,916
我看過把攝影機寬度跟高度設定跟畫布視窗大小一樣的展示

19
00:01:08,941 --> 00:01:10,016
別這麼做

20
00:01:10,040 --> 00:01:13,301
你是在世界座標系設定攝影機的大小

21
00:01:13,326 --> 00:01:17,390
基本上跟畫布視窗的像素大小不會相等

22
00:01:17,415 --> 00:01:21,143
如果我們停在這裡，把喝水鳥放進場景，會得到它的側寫

23
00:01:21,168 --> 00:01:25,385
現在要做的是移動旋轉攝影機創造更有意思的視角

24
00:01:25,410 --> 00:01:26,638
這段程式達到這個效果

25
00:01:26,663 --> 00:01:31,003
第一行移動盒子這麼多，這是平移，跟移動一般物件一樣

26
00:01:31,028 --> 00:01:33,341
攝影機控制程式做了兩件事

27
00:01:33,366 --> 00:01:36,717
首先它設定了你如何用滑鼠控制攝影機

28
00:01:36,742 --> 00:01:42,451
我擴充 Three.js 的 OrbitControls 寫了這個 OrbitAndPanControls

29
00:01:42,476 --> 00:01:46,443
這個控制會保持攝影機的 Y 軸向上

30
00:01:46,468 --> 00:01:52,003
如果你想要更不受限但是也更難操作的控制可以指定使用 TrackballControls

31
00:01:52,028 --> 00:01:54,924
不管用哪種控制，下一行指定了攝影機的目標

32
00:01:54,949 --> 00:01:56,917
目標 target 是攝影機看向的位置

33
00:01:56,942 --> 00:01:59,616
如此定義了攝影機新的 Z 軸方向

34
00:01:59,641 --> 00:02:02,330
Y 軸則是盡量保持向上

35
00:02:02,354 --> 00:02:05,637
之後在提相機投影矩陣的組成時會再提到

36
00:02:05,662 --> 00:02:09,847
當我們把盒子移至定位，就定義出我們想繪圖的區域

37
00:02:09,872 --> 00:02:13,014
這個盒子包含的內容就是我們螢幕所見

38
00:02:13,039 --> 00:02:17,564
Z 緩衝區照舊運作，較近的物件會遮擋較遠的物件

39
00:02:17,589 --> 00:02:19,749
這只是基礎概念的概覽

40
00:02:19,774 --> 00:02:22,304
攝影機定義了一塊空間與其邊界

41
00:02:22,329 --> 00:02:25,816
這塊空間接著被旋轉移動以形成影像

42
00:02:25,841 --> 00:02:28,611
我會在接下來的課程詳述這個流程

