1
00:00:00,001 --> 00:00:05,427
在我解釋投影之前，先來看看在 Three.js 要如何設定透視攝影機

2
00:00:05,452 --> 00:00:07,704
跟正交攝影機類似

3
00:00:07,729 --> 00:00:10,618
實際上參數更少

4
00:00:10,642 --> 00:00:12,206
我們已經知道後三個是什麼

5
00:00:12,231 --> 00:00:15,545
長寬比是影像寬度除以高度

6
00:00:15,569 --> 00:00:18,258
接著是近、遠平面位置

7
00:00:18,283 --> 00:00:21,066
還記得視錐嗎？它終於回來了

8
00:00:21,091 --> 00:00:26,949
近和遠的距離是由攝影機所在的金字塔頂端沿著中心軸衡量

9
00:00:26,974 --> 00:00:32,859
當我還年輕時，我們稱近和遠叫這邊（Hither）跟那邊（Yon），我覺得這樣比較有詩意

10
00:00:32,884 --> 00:00:36,975
你還是有可能會在工具裡看到 Hither 跟 Yon 兩個單字

11
00:00:37,000 --> 00:00:40,432
透視攝影機的第一個參數是視野大小

12
00:00:40,457 --> 00:00:44,323
這是視角金字塔頂面跟底面的張角

13
00:00:44,348 --> 00:00:49,767
注意到在 Three.js 這個角度是用度，不像其他地方用的是弧度

14
00:00:49,792 --> 00:00:55,559
視野大小跟長寬比定義出金字塔的四個面

15
00:00:55,584 --> 00:01:00,090
正交攝影機裡我們定義了視野容體盒子的每一面的位置

16
00:01:00,115 --> 00:01:03,437
這裡視角假設是沿著中軸對稱的

17
00:01:03,462 --> 00:01:06,224
即我們不需要上、下兩個值

18
00:01:06,249 --> 00:01:09,880
我們只需要一個視野大小角度描述上下邊界

19
00:01:09,905 --> 00:01:14,099
左跟右也是，只要長寬比跟角度就好

20
00:01:14,124 --> 00:01:18,768
這是 Three.js 的作法，也是 99% 的情況你想要的做法

21
00:01:18,793 --> 00:01:22,350
但各自定義金字塔的各個面也是可能的

22
00:01:22,375 --> 00:01:26,222
WebGL 有支援這種操作的視錐

23
00:01:26,247 --> 00:01:30,888
如果你之後修改了攝影機的值，像是視野大小、遠近平面

24
00:01:30,913 --> 00:01:36,729
在 Three.js 你要呼叫 updateProjectionMatrix 使改變生效

25
00:01:36,754 --> 00:01:41,134
大部分的展示中這些值初始化設定後就不會再改動

26
00:01:41,158 --> 00:01:44,350
所以 Three.js 不會花時間每一格都檢查

27
00:01:44,376 --> 00:01:46,964
如果你在程式執行中改變這些值

28
00:01:46,989 --> 00:01:53,063
要呼叫 updateProjectionMatrix 讓 Three.js 用參數產生新的投影矩陣

