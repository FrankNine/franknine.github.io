1
00:00:00,001 --> 00:00:03,760
這是由 Three.js 參數算出的透視矩陣

2
00:00:03,785 --> 00:00:06,723
左上角 3 X 3 是縮放因素

3
00:00:06,748 --> 00:00:11,397
跟正交投影類似，但是 Z 的縮放值不一樣

4
00:00:11,422 --> 00:00:13,783
Z 軸還有平移的因素

5
00:00:13,808 --> 00:00:19,517
但是最大的不同是在最後一行有 -1，右下角是 0

6
00:00:19,542 --> 00:00:24,991
我不會在這裡推導出投影公式，好的圖學教科書都會有這過程

7
00:00:25,016 --> 00:00:28,855
另外注意有的時候公式裡近跟遠的值是負數

8
00:00:28,880 --> 00:00:31,372
因為你是沿負 Z 軸前進

9
00:00:31,397 --> 00:00:37,191
為了要保持右手座標系統，我們必須忍受正 Z 軸指向觀測者的不便

10
00:00:37,216 --> 00:00:42,030
在這個矩陣的遠近值我用的是正的數，因為 Three.js 是這樣規定的

11
00:00:42,055 --> 00:00:43,704
謝天謝地

12
00:00:43,729 --> 00:00:47,639
這兩個值在投影座標變換必須是正的

13
00:00:47,664 --> 00:00:52,062
可以看到如果近的位置在攝影機後會有奇怪的結果

14
00:00:52,087 --> 00:00:55,724
正交投影遠近值設多少都可以

15
00:00:55,749 --> 00:00:59,442
負數也行，因為我們只是在空間中框出盒子

16
00:00:59,467 --> 00:01:04,514
在透視投影我們做了更複雜的座標變換，所以這兩個值得是正的

17
00:01:04,539 --> 00:01:07,952
這個投影矩陣對座標的效果相當有趣

18
00:01:07,977 --> 00:01:09,658
舉個簡單的例子

19
00:01:09,682 --> 00:01:12,689
視野大小 90 度，長寬比 1

20
00:01:12,714 --> 00:01:14,611
近 1、遠 11

21
00:01:14,636 --> 00:01:19,301
會得到這個矩陣，來試試看套在點上有什麼效果

