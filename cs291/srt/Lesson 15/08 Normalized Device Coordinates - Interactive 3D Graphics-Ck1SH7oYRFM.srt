1
00:00:00,001 --> 00:00:04,149
有了視角座標變換，現在所有座標都在攝影機的參考座標中

2
00:00:04,174 --> 00:00:08,397
接下來我們要在空間中定義一個盒子，包含所有要繪製的物件

3
00:00:08,422 --> 00:00:10,726
有點像是定義舞台的大小

4
00:00:10,751 --> 00:00:17,839
如同之前提到的，正交攝影機是由左右、上下、遠近這些值來定義盒子

5
00:00:17,864 --> 00:00:22,023
這六個數字定義了攝影機視角空間裡方形空間的六個角

6
00:00:22,048 --> 00:00:25,529
第一次解釋的時候我說我們創造了盒子，在空間中定位它

7
00:00:25,554 --> 00:00:28,231
就矩陣的觀點是相反

8
00:00:28,256 --> 00:00:31,121
我們先將世界對到攝影機的視角

9
00:00:31,145 --> 00:00:33,440
然後相對於攝影機定義盒子

10
00:00:33,465 --> 00:00:38,041
實務上我們讓左跟右的值相反，上跟下也是相反

11
00:00:38,066 --> 00:00:40,654
近的值是 0，雖然可以是其他值

12
00:00:40,679 --> 00:00:45,860
概念是視角矩陣將世界所有東西移動到相對於攝影機鏡頭的位置

13
00:00:45,885 --> 00:00:49,176
創造正交攝影機本身產生了投影矩陣

14
00:00:49,201 --> 00:00:54,152
由投影矩陣定義的盒子在攝影機之前且沿著視角的軸對稱

15
00:00:54,177 --> 00:00:57,336
這個盒子稱為視野容體（View Volume）執行了投影

16
00:00:57,361 --> 00:01:03,847
我們不只定義了盒子，還將所有盒子內的東西投影到正 Z 軸的面上以產生影像

17
00:01:03,872 --> 00:01:06,934
你可能在想為什麼我們要往負 Z 軸看

18
00:01:06,959 --> 00:01:10,714
這麼做是因為攝影機座標是右手系統

19
00:01:10,739 --> 00:01:16,260
Y 向上、X 向右，在形成的圖像上定義了笛卡兒座標系

20
00:01:16,285 --> 00:01:19,835
為了保持右手系統，Z 軸必須指向觀測者

21
00:01:19,860 --> 00:01:22,519
而我們必須看向負 Z 軸

22
00:01:22,544 --> 00:01:27,348
話雖如此，Three.js 認為正交攝影機是往正的方向前進

23
00:01:27,373 --> 00:01:31,564
所以遠的值是以沿負 Z 軸行進多少定義

24
00:01:31,589 --> 00:01:36,496
我們將投影加到一連串矩陣的前頭，即它是下一個施加的

25
00:01:36,521 --> 00:01:40,721
施加後，座標新的值現在是在投影的參考座標裡

26
00:01:40,746 --> 00:01:45,325
這個參考座標叫 Normalized Device Coordinates，或簡稱 NDC

27
00:01:45,350 --> 00:01:49,794
NDC 座標在 X, Y, Z 方向範圍都是 -1 到 1

28
00:01:49,819 --> 00:01:51,816
我們會提更多關於這個座標變換的事

29
00:01:51,841 --> 00:01:56,603
但基本上在盒子內的座標會變換到這個範圍內

