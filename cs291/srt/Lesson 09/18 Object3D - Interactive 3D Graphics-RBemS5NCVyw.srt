1
00:00:00,001 --> 00:00:05,860
我們已經看到 Three.js 無法讓我們直接平移再旋轉指針

2
00:00:05,885 --> 00:00:09,313
問題在 Three.js 先旋轉再移動

3
00:00:09,337 --> 00:00:11,496
但我們想要反著來

4
00:00:11,521 --> 00:00:15,592
一個簡單的解法是使用 Object3D

5
00:00:15,617 --> 00:00:18,605
創造一個新物件來包含我們的指針

6
00:00:18,629 --> 00:00:20,349
這裡是這麼做的程式

7
00:00:20,374 --> 00:00:25,422
方塊在這裡被嵌套進 clockHand 物件

8
00:00:25,447 --> 00:00:29,611
平移讓方塊的一端對齊時鐘中心

9
00:00:29,636 --> 00:00:32,809
這樣指針才能妥善地在鐘面旋轉

10
00:00:32,834 --> 00:00:38,813
把這個物件放進 clockHand，我的意思是用方塊現在既有的位置

11
00:00:38,838 --> 00:00:42,672
然後能再施加額外的縮放、旋轉、平移

12
00:00:42,697 --> 00:00:44,854
這裡我只想旋轉

13
00:00:44,878 --> 00:00:48,066
最後一行程式將 clockHand 物件加入場景

14
00:00:48,091 --> 00:00:49,981
這是看待 Object3D 的一種方式

15
00:00:50,005 --> 00:00:53,003
它增加更多的座標變換到可用清單裡

16
00:00:53,028 --> 00:00:56,453
現在系統裡有 6 個座標變換能設定

17
00:00:56,478 --> 00:00:58,873
這是表示概念的圖像

18
00:00:58,898 --> 00:01:03,512
我們創造了方塊，可以對它縮放、旋轉、平移

19
00:01:03,537 --> 00:01:11,215
把它放進叫 clockHand 的 Object 3D，我們得到額外可以施加的縮放、旋轉、平移

20
00:01:11,240 --> 00:01:14,566
這是座標變換順序的精簡寫法

21
00:01:14,591 --> 00:01:20,736
物件、縮放、旋轉、平移，然後再縮放、旋轉、平移

22
00:01:20,761 --> 00:01:24,953
這看起來有點怪，我把座標變換由右往左寫

23
00:01:24,978 --> 00:01:28,425
這麼做是有原因的，我在講到矩陣時會解釋

24
00:01:28,450 --> 00:01:34,419
現在你只要相信這是絕大部分圖學課本展示一連串座標變換的方法

25
00:01:34,444 --> 00:01:37,641
我記憶這個順序的方法是單字 TRaSh

26
00:01:37,666 --> 00:01:41,091
這個單字有 T 有 R 有 S，而且順序對

27
00:01:41,116 --> 00:01:44,733
我猜我也能用 TREES 取代而不用考慮 H

28
00:01:44,758 --> 00:01:49,921
但我喜歡 Trash，讓我想到 TRS-80，又稱 Trash 80

29
00:01:49,946 --> 00:01:52,102
最早的個人電腦之一

30
00:01:52,127 --> 00:01:56,916
在程式還錄在錄音帶上的年代，這台電腦稱霸世界

31
00:01:56,941 --> 00:02:01,389
在 1979 年，它是有最多可用軟體的個人電腦

32
00:02:01,413 --> 00:02:04,161
要記得 TRS 這個順序

33
00:02:04,186 --> 00:02:08,952
我們的例子，只用到了方塊的平移跟 clockHand 的旋轉

34
00:02:08,977 --> 00:02:11,308
這給了我們想要的組合

35
00:02:11,333 --> 00:02:15,879
平移以得到新原點，然後繞著新原點轉

36
00:02:15,904 --> 00:02:20,093
為了一個座標變換創出 Object3D 感覺有點殺雞用牛刀

37
00:02:20,118 --> 00:02:22,595
但實際上沒有增加那麼多程式

