1
00:00:00,025 --> 00:00:05,363
實例化（Instancing）是重複利用一組三角形幾何的概念

2
00:00:05,388 --> 00:00:09,949
像是一盞吊燈，你可能有一個燈座的幾何

3
00:00:09,974 --> 00:00:15,222
如果你想要三個燈座，那要指定三個不同的座標變換代表燈座要裝在哪

4
00:00:15,247 --> 00:00:18,084
但是三者共用同一組三角形資料

5
00:00:18,109 --> 00:00:21,545
在 Three.js 三角形的網格被稱為幾何（Geometry）

6
00:00:21,569 --> 00:00:23,929
你時常會聽到物件網格（Object Mesh）的說法

7
00:00:23,954 --> 00:00:26,726
網格（Mesh）在 Three.js 是一種物件類別

8
00:00:26,751 --> 00:00:31,783
如果幾何沒變就重複利用，這在 Three.js 還蠻容易做到的

9
00:00:31,808 --> 00:00:35,765
這裡是個範例，我創造了圓柱的幾何

10
00:00:35,790 --> 00:00:39,331
然後在各個 Mesh 物件重複利用它

11
00:00:39,356 --> 00:00:43,029
注意到 Mesh 物件是由幾何跟材質構成

12
00:00:43,054 --> 00:00:48,110
代表說我能重複利用同一個圓柱幾何但給不同的材質

13
00:00:48,134 --> 00:00:50,674
假設一個車模型有四個輪胎

14
00:00:50,699 --> 00:00:55,604
問題是以下那些是使用實例化處理輪胎的合理理由？

15
00:00:55,629 --> 00:00:59,112
可以讓單個輪胎看起來洩氣扁掉

16
00:00:59,137 --> 00:01:01,696
減少需要的座標變換

17
00:01:01,720 --> 00:01:03,369
用的記憶體更少

18
00:01:03,394 --> 00:01:07,503
可以讓某些輪胎用更少幾何繪製

