1
00:00:00,007 --> 00:00:02,047
光的發射體可以是任何形式

2
00:00:02,072 --> 00:00:06,302
光的效果終究會到 Vertex 或 Fragment Shader 計算

3
00:00:06,327 --> 00:00:09,765
但應用程式面有幾種光的常用的形式

4
00:00:09,790 --> 00:00:11,847
最簡單的是定向光（Directional light）

5
00:00:11,871 --> 00:00:14,621
這種光只由一個方向向量定義

6
00:00:14,646 --> 00:00:17,104
定向光是像太陽的光源

7
00:00:17,129 --> 00:00:20,436
對地球上所有物件來說到太陽的方向都是一樣的

8
00:00:20,461 --> 00:00:23,632
定向光被認為是距離無窮遠

9
00:00:23,657 --> 00:00:26,514
許多模型編輯器，像是這個 Three.js 編輯器

10
00:00:26,539 --> 00:00:29,853
定向光顯示成一個點，你可以拖曳移動

11
00:00:29,877 --> 00:00:33,238
但是你操作的實際上是光的方向，不是位置

12
00:00:33,263 --> 00:00:38,791
因為我們用不同方式合併顏色，所以顏色通道不一定有 1.0 上限

13
00:00:38,815 --> 00:00:39,748
都是看情況

14
00:00:39,773 --> 00:00:43,832
如果我要顯示在螢幕上，我會用 0.0 到 1.0 範圍

15
00:00:43,857 --> 00:00:49,286
各通道有強度上限，超過 1.0 的值就超越了螢幕的顯示能力

16
00:00:49,311 --> 00:00:53,140
但如果我想要讓光變亮，我可能會把強度設到 11

17
00:00:53,165 --> 00:00:56,868
經過光到物件的距離衰減跟物件本身顏色的計算

18
00:00:56,893 --> 00:00:59,999
最後顏色結果可能落在 0.0 到 1.0 之間

19
00:01:00,024 --> 00:01:03,415
有些系統甚至能將光強度設為負數

20
00:01:03,440 --> 00:01:06,199
代表光以某種方式從場景中吸走光子

21
00:01:06,224 --> 00:01:09,195
畢竟光的顏色強度只是計算公式上的一項

22
00:01:09,220 --> 00:01:12,661
材質顏色也能像這樣隨意設定

23
00:01:12,686 --> 00:01:17,266
但我們傾向設定在 0.0 到 1.0 之間，像是當作反射率（Reflectivity）

24
00:01:17,291 --> 00:01:21,774
這些基礎照明公式沒有參考現實物理單位像是瓦跟流明

25
00:01:21,799 --> 00:01:24,642
而是為了我們的方便壓縮在 0.0 到 1.0 範圍

