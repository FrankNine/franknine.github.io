1
00:00:00,007 --> 00:00:05,041
在上個展示可以看到增加鑲嵌會讓光照計算結果變好

2
00:00:05,066 --> 00:00:08,590
但是增加閃亮程度還是會看出破綻

3
00:00:08,615 --> 00:00:13,410
另外球體邊緣的三角形密度比中間高得多

4
00:00:13,435 --> 00:00:16,127
如果我們持續增加球體的鑲嵌

5
00:00:16,152 --> 00:00:22,405
會在邊緣產生大量需要計算但對視覺效果沒有幫助的三角形

6
00:00:22,430 --> 00:00:27,120
理想上我們該在各個像素上對反射模型求值

7
00:00:27,144 --> 00:00:29,452
這是完全合理的做法

8
00:00:29,477 --> 00:00:34,256
我們不內插光照計算後產生的 RGB 值

9
00:00:34,281 --> 00:00:37,808
而是內插計算反射模型需要的所有參數

10
00:00:37,833 --> 00:00:40,974
在這裡我們需要內插的是著色法向量

11
00:00:40,999 --> 00:00:44,356
在 GPU 上發生的是我們用 Vertex Shader

12
00:00:44,380 --> 00:00:47,167
像以前一樣輸入位置與法向量

13
00:00:47,192 --> 00:00:52,391
輸出是螢幕位置然後不是光照公式計算出來的 RGB

14
00:00:52,416 --> 00:00:55,119
我們輸出的是座標變換過的法向量

15
00:00:55,144 --> 00:01:00,035
這兩個是頂點法向量，然後逐像素內插

16
00:01:00,060 --> 00:01:07,440
這個內插法向量成為 Fragment Shader 的輸入，再用反射模型的求取顯示的 RGB

17
00:01:07,465 --> 00:01:10,973
關於法向量內插有件事我得提

18
00:01:10,997 --> 00:01:13,992
內插過的法向量不會是正規化的

19
00:01:14,017 --> 00:01:16,954
它們的長度不全是一

20
00:01:16,979 --> 00:01:21,892
看看圖上內插的法向量總是比較短一點

21
00:01:21,917 --> 00:01:26,310
這些法向量應該正規化過再進行光照計算

22
00:01:26,335 --> 00:01:30,765
當我們內插法向量並在每個像素上對反射模型求值

23
00:01:30,790 --> 00:01:34,424
這叫逐像素著色（Per-pixel Shading），或是 Phong 著色（Phong Shading）

24
00:01:34,449 --> 00:01:37,370
Phong 發明了兩件事，容易讓人搞混

25
00:01:37,395 --> 00:01:41,786
一個是 Phong 反射模型，給我們鏡面反射的高光跟亮點

26
00:01:41,811 --> 00:01:48,185
另一個是 Phong 著色，橫跨三角形內插資料然後逐像素計算顏色

27
00:01:48,210 --> 00:01:50,334
這跟 Gouraud 著色不同

28
00:01:50,359 --> 00:01:54,880
它在頂點計算顏色然後內插顏色

29
00:01:54,905 --> 00:01:59,086
試試新的展示，看 Phong 著色如何大幅改善成像品質

30
00:01:59,111 --> 00:02:04,103
這麼做當然有成本，光照的計算頻率高得多

31
00:02:04,128 --> 00:02:08,087
但是如果你想要好的鏡面反射高光效果這是必須的

