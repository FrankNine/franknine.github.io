1
00:00:00,001 --> 00:00:04,214
我們推導出一個大部分情況適用的透明系統

2
00:00:04,239 --> 00:00:08,355
總結來說，首先開啟 Z 緩衝區先畫所有不透明物件

3
00:00:08,380 --> 00:00:11,688
然後為了接下來的透明物件開啟混色

4
00:00:11,713 --> 00:00:16,752
GPU 要花額外的時間計算混色，所以只在有必要時開啟

5
00:00:16,777 --> 00:00:20,525
最後透明物件依離視角距離遠到近排序

6
00:00:20,550 --> 00:00:22,680
以遠到近順序繪製

7
00:00:22,705 --> 00:00:27,032
如果攝影機或任何物件會移動，則每一格都要做一次排序

8
00:00:27,056 --> 00:00:29,932
這其實就是 Three.js 實作的演算法

9
00:00:29,957 --> 00:00:32,939
你藉由設定其材質讓物件變透明

10
00:00:32,964 --> 00:00:38,178
有兩個參數要設定，opacity 參數即混色用的 Alpha 值

11
00:00:38,203 --> 00:00:41,329
也要將 transparent 參數設為 true

12
00:00:41,354 --> 00:00:47,546
這套透明做法實務上通常有效，但還是有些情境會有問題

13
00:00:47,571 --> 00:00:50,536
其中一個問題是物件相互穿插時

14
00:00:50,560 --> 00:00:54,300
接下來有個展示，裡面有一個透明方塊穿過另一個透明方塊

15
00:00:54,325 --> 00:00:59,678
試試這個展示，移動攝影機跟用滑桿移動方塊

16
00:00:59,703 --> 00:01:05,856
物件中心的點代表用來計算物件離攝影機距離的位置

17
00:01:05,881 --> 00:01:11,071
當你操作過展示後，請回答哪邊出錯的問題

