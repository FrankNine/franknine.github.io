1
00:00:00,039 --> 00:00:03,888
我們講了很多顏色，但都沒提到材質

2
00:00:03,912 --> 00:00:05,705
假設有一顆紅色的球

3
00:00:05,730 --> 00:00:10,144
我們要如何讓 GPU 計算場景的光與球的材質互動的結果

4
00:00:10,168 --> 00:00:12,715
好讓球看起來像真的

5
00:00:12,740 --> 00:00:19,894
互動式繪圖的標準做法是將材質的外觀拆成幾個元素再加總

6
00:00:19,919 --> 00:00:23,836
自發光（Emissive）、環境光（Ambient）、漫射（Diffuse）、鏡面反射（Specular）

7
00:00:23,861 --> 00:00:28,356
自發光是物件自身發出的光的顏色

8
00:00:28,381 --> 00:00:33,088
像是燈泡本身固有顏色，其他光源無法影響這部分

9
00:00:33,113 --> 00:00:38,639
實際應用上自發光就是無視打光條件直接加上顏色的方法

10
00:00:38,664 --> 00:00:41,158
第二個環境光是個捏造的部分

11
00:00:41,183 --> 00:00:46,128
單純是加上讓沒有直接光照的地方好看一點

12
00:00:46,153 --> 00:00:49,460
不同系統會有不同的處理方式

13
00:00:49,485 --> 00:00:55,834
說到底，環境光就是用來計算一個顏色常數加到 Fragment 的計算結果

14
00:00:55,859 --> 00:01:01,626
自發光跟環境光分開因為兩者用途不同，通常也是用不同方式控制

15
00:01:01,651 --> 00:01:07,875
像是 Three.js 可以讓你設定環境光，影響所有有環境光元素的材質

16
00:01:07,900 --> 00:01:10,920
記得我們簡化過場景裡的光

17
00:01:10,945 --> 00:01:14,439
我們假設光子只來自光源，不隨意彈射

18
00:01:14,464 --> 00:01:19,437
但現實中光子可以打到地面，反射在球底面上，再進到眼睛

19
00:01:19,462 --> 00:01:24,742
如果照我們的假設球的底面完全不會有任何光，會一片黑

20
00:01:24,767 --> 00:01:30,095
環境光讓這些地方至少有點顏色，而不是全黑

21
00:01:30,120 --> 00:01:34,300
漫射與鏡面反射元素根據場景中的光來計算

22
00:01:34,325 --> 00:01:37,680
自發光與環境光跟場景中的光獨立

23
00:01:37,705 --> 00:01:40,593
漫射可以想像是消光處理的表面

24
00:01:40,618 --> 00:01:43,962
而鏡面反射可以想成是物件的反光

25
00:01:43,987 --> 00:01:48,718
在計算時鏡面反射也會受到觀察者的位置影響

26
00:01:48,743 --> 00:01:53,183
而漫射只跟光的位置有關

