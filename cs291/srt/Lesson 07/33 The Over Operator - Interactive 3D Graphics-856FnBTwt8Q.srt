1
00:00:00,025 --> 00:00:05,514
更通用的作法是讓透明過濾片的顏色影響後面物件的顏色

2
00:00:05,539 --> 00:00:08,222
換句話說我們要混和這兩個顏色

3
00:00:08,247 --> 00:00:12,194
在電腦圖學原來的顏色叫做目標（Destination）

4
00:00:12,219 --> 00:00:17,286
我們看穿的透明物件顏色叫做來源（Source）顏色

5
00:00:17,311 --> 00:00:20,954
我們也想控制有多少能通過過濾片

6
00:00:20,954 --> 00:00:24,519
在電腦圖學這個控制值叫作 Alpha

7
00:00:24,543 --> 00:00:27,394
這裡它描述了過濾片的不透明程度

8
00:00:27,419 --> 00:00:32,256
當 Alpha 為 1，過濾片完全不透明完全不讓光通過

9
00:00:32,281 --> 00:00:36,704
當值遞減，越來越多目標顏色可見

10
00:00:36,729 --> 00:00:40,760
在這裡我展示紅色如何受影響、藍色如何透過

11
00:00:40,785 --> 00:00:45,031
當 Alpha 為 0，過濾片完全透明沒有作用

12
00:00:45,056 --> 00:00:48,279
通常的混色方法是用這個公式

13
00:00:48,304 --> 00:00:52,718
來源過濾片的的顏色乘上來源的 Alpha

14
00:00:52,743 --> 00:00:55,922
這給我們來源對最後結果顏色的影響力

15
00:00:55,947 --> 00:01:00,107
Alpha 值越大，來源顏色的影響越大

16
00:01:00,131 --> 00:01:04,002
為了平衡我們取 1 - Alpha

17
00:01:04,027 --> 00:01:08,377
這個值代表目標顏色對結果的影響程度

18
00:01:08,402 --> 00:01:11,072
這種混色叫做 Over 運算子

19
00:01:11,097 --> 00:01:14,342
這給我們一個顏色置於另一個顏色之上（Over）的效果

20
00:01:14,367 --> 00:01:19,569
來源透明過濾片的 Alpha，值在 0 到 1 之間

21
00:01:19,594 --> 00:01:24,509
如果 Alpha 為 0，則這個公式顏色直接等於目標顏色

22
00:01:24,534 --> 00:01:27,437
因為來源過濾片是完全透明

23
00:01:27,462 --> 00:01:33,729
如果 Alpha 為 1，則來源為不透明完全遮擋掉後面的東西

24
00:01:33,754 --> 00:01:38,807
簡化的公式如預期，結果等於來源顏色

25
00:01:38,832 --> 00:01:42,289
Alpha 值在這兩個顏色間混色

26
00:01:42,313 --> 00:01:46,742
另一種說法是這個公式在做線性內插

27
00:01:46,767 --> 00:01:52,757
當一個顏色的影響力增加，另一個呈比例減少

28
00:01:52,782 --> 00:01:57,933
使用一個控制值，這裡是 Alpha，在 0 和 1 之間變動

29
00:01:57,958 --> 00:02:01,111
在電腦圖學中蠻常見的

30
00:02:01,136 --> 00:02:05,880
在這領域探索你會看到更多長這樣個公式

31
00:02:05,905 --> 00:02:08,543
Over 運算子在透明上很有用

32
00:02:08,568 --> 00:02:11,532
但 WebGL 還有很多不同的混色模式

33
00:02:11,557 --> 00:02:16,729
像是有一種叫做加色（Add），將來源跟目標顏色相加

34
00:02:16,754 --> 00:02:21,303
在 Three.js 混色模式由材質的 Blending 參數控制

35
00:02:21,327 --> 00:02:23,572
這裡我們看到的是 Over 公式

36
00:02:23,597 --> 00:02:27,911
控制 Alpha 我們淡入淡出透明物件

37
00:02:27,936 --> 00:02:29,324
自己試試看

