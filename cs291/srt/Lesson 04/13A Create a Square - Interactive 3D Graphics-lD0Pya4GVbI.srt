1
00:00:00,001 --> 00:00:02,841
其實有很多方法表示方形

2
00:00:02,865 --> 00:00:05,912
其中一種方法是暴力解

3
00:00:05,937 --> 00:00:09,851
即創造兩個完全獨立的三角形

4
00:00:09,883 --> 00:00:18,116
前四行程式 0, 1, 2 號點構成一個三角形

5
00:00:18,141 --> 00:00:22,940
第二個三角形是用 3, 4, 5 號這三個點

6
00:00:22,964 --> 00:00:27,478
你會發現 2, 3 跟 5, 0 是重複的

7
00:00:27,503 --> 00:00:30,912
我們可以合併來節省時間空間

8
00:00:30,937 --> 00:00:35,666
比較精簡有效率的做法是先標出方形的四個點

9
00:00:35,691 --> 00:00:40,220
然後重複利用這些點構成兩個三角形

10
00:00:40,251 --> 00:00:47,439
像這裡我們重複利用了 0, 2 兩點

11
00:00:47,464 --> 00:00:51,774
Three.js 碰巧支援四點構成的面

12
00:00:51,799 --> 00:00:54,229
你可以就這樣定義

13
00:00:54,254 --> 00:00:59,870
但底層的 WebGL 或是 DirectX API 還是只認三角形

14
00:00:59,910 --> 00:01:03,371
當 Three.js 這樣定義四邊形

15
00:01:03,371 --> 00:01:07,178
四邊形還是先拆成兩個三角形才送往 GPU

16
00:01:07,203 --> 00:01:10,974
如果你直接用四邊形解答

17
00:01:10,999 --> 00:01:15,023
代表你有讀 Three.js 的文件，可以加分

18
00:01:15,048 --> 00:01:19,713
但是你還是該練習用三角形解答

