1
00:00:00,280 --> 00:00:04,883
FPS 是量測應用程式常見的標準

2
00:00:04,908 --> 00:00:10,097
如果某個應用程式在一個系統跑 10 FPS 另一個系統跑 20 FPS

3
00:00:10,122 --> 00:00:14,436
我們可以說第二個系統快兩倍

4
00:00:14,476 --> 00:00:19,031
然而圖學程式設計師漸漸改用 FPS 的倒數

5
00:00:19,056 --> 00:00:20,851
「每格需要多少毫秒」

6
00:00:20,876 --> 00:00:22,965
這樣做有一些好處

7
00:00:22,990 --> 00:00:28,955
對我來說最主要的優點是使用毫秒給你比較演算法的基準

8
00:00:28,980 --> 00:00:33,177
如果你用多少毫秒一格來描述演算法

9
00:00:33,202 --> 00:00:36,475
你可以直接從這個數字感受到對速度的影響

10
00:00:36,500 --> 00:00:41,683
「這個使用者介面每格花了 5 毫秒」是有意義的

11
00:00:41,738 --> 00:00:46,227
「這個使用者介面使 FPS 下降 10」不是那麼有用

12
00:00:46,252 --> 00:00:49,045
因為我們還要知道先前的 FPS

13
00:00:49,076 --> 00:00:53,789
用 FPS 衡量個別繪圖操作也沒什麼意義

14
00:00:53,814 --> 00:00:56,894
花費時間的總和才重要

15
00:00:56,919 --> 00:01:01,013
毫秒可以相加算出一格總共需要多少

16
00:01:01,052 --> 00:01:07,584
遊戲通常有 33.3 毫秒的預算可以用，換算成 FPS 是 30 FPS

17
00:01:07,655 --> 00:01:12,742
如果不同的效果要花不同的時間，我們可以加總來看是否超標

18
00:01:12,831 --> 00:01:16,552
如果應用程式要達到 60 FPS，則可用預算減半

19
00:01:16,732 --> 00:01:21,065
另一個避免使用 FPS 的理由是它難以用在計算

20
00:01:21,145 --> 00:01:25,443
這就是我要你做的，讓你感受一下問題

21
00:01:25,514 --> 00:01:28,635
你量測一個在建築物內移動的程式

22
00:01:28,660 --> 00:01:33,283
得到以下數據：25 FPS 100 格

23
00:01:33,347 --> 00:01:36,225
下 100 格 50 FPS

24
00:01:36,257 --> 00:01:39,339
再下 100 格 25 FPS

25
00:01:39,363 --> 00:01:43,046
最後 100 格 10 FPS

26
00:01:43,077 --> 00:01:46,594
請問平均的 FPS 為何？

27
00:01:46,665 --> 00:01:51,100
給你個提示：直接平均 FPS 的數字是錯的

28
00:01:51,125 --> 00:01:56,015
試想總共畫了多少格，又過了多少時間

29
00:01:56,045 --> 00:01:59,578
你也許可以用移動速度來想這個問題

